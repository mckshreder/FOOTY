    

<script>
//= require jquery.turbolinks

var map;

function initialize() {
  var mapOptions = {
    zoom: 6
  };
  // google.maps,Map creates map on div canvas
  var map = new google.maps.Map(document.getElementById('map-canvas'),
      mapOptions);

  // this creates a location of the current users location 
	if(navigator.geolocation) {
	    navigator.geolocation.getCurrentPosition(function(position) {
	      	// this assigns the current users coordinats as pos
	      	var pos = new google.maps.LatLng(position.coords.latitude,
	                                       position.coords.longitude);
	      	// below creates the info window marker for current user location
	      	var infowindow = new google.maps.InfoWindow({
		        // must use map
		        map: map,
		        // assigns the window to show on map at current user location
		        position: pos,
		        content: 'Location found using HTML5.'
	      	});
	      	// brings the users map to center their location
	    	map.setCenter(pos);
	 	});

	 	handleNoGeolocation(true);
	}
	else {
    // Browser doesn't support Geolocation
    	handleNoGeolocation(false);
  	}
  	
  	// variable for all markers in event.all. We extract the data from the <select hidden, id = "marker_data" multiple> tag. data is ["123.1,-76.928"] Jquery
  	var markers = $("#marker_data").val();

	for (var i = 0; i < markers.length; i++) {
		// this splits data into two seperate strings of an array. Erase ","
		var coordinates = markers[i].split(",");
		// Number takes array turns strings into numbers for google pos variable
		var pos = new google.maps.LatLng(Number(coordinates[0]),Number(coordinates[1]));
	      console.log(pos);

		
	    // this creates the marker in the user view
		var marker = new google.maps.Marker({
	      animation: google.maps.Animation.DROP,
	      position: pos,
	      map: map
	  
	  	});

		// this creates zoom when user clicks marker
        google.maps.event.addListener(marker, 'click', function() {
	     map.setZoom(50);
	     map.setCenter(marker.getPosition());
	    });
	}
}

function handleNoGeolocation(errorFlag) {
  if (errorFlag) {
    var content = 'Error: The Geolocation service failed.';
  } else {
    var content = 'Error: Your browser doesn\'t support geolocation.';
  }
}

// jquery call to initalize () on load basically
$(document).ready(function() {
	initialize();
});
</script>

<!-- this contains the map on the view -->
<div id="map-canvas"></div>

<!-- this creates ruby data in the view that can be accessed by JS if the <script> is on same exact file. multiple allows JS to know there is multple data  -->
<select hidden, id = "marker_data" multiple>
<% @events.each do |event| %>
	<option selected = "true" value = "<%= event.latitude%>,<%= event.longitude%>">
	</option>	
<% end %>
</select>